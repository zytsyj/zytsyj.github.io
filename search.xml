<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>”自定义函数“</title>
      <link href="/2022/09/13/%E2%80%9D%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E2%80%9C/"/>
      <url>/2022/09/13/%E2%80%9D%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E2%80%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="好了，各位友友们，今天让我们浅讲一下自定义函数这个事情．"><a href="#好了，各位友友们，今天让我们浅讲一下自定义函数这个事情．" class="headerlink" title="好了，各位友友们，今天让我们浅讲一下自定义函数这个事情．"></a>好了，各位友友们，今天让我们浅讲一下自定义函数这个事情．</h2><p>在切入正题前我先来浅讲一下为什么要自定义函数，其实往简单了说就是为了程序设计的简洁与简便， 因为C数库中的简单函数单个并不足以完成一些基本需重复的操作，于是将多个函数操作打包到一起成为一个新的函数便成为最佳手段。而往大了说则是因为C语言是面向过程的语言，而自定义函数恰恰是面向过程思想模块化的一种体现。</p><p><img src="/2022/09/13/%E2%80%9D%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E2%80%9C/944179aa2f964b723b7206aea7a615c.jpg"></p><p><em><strong>（浅说一下，结构化思想的进一步发展是对象化的编程思想，我们熟知的c++便是秉承这种思想的对象化语言）</strong></em></p><p>那么接下来就来详细介绍一下自定义的语法<br>首先要写出函数声明也叫函数头由返回类型    函数名（）三部分组成。<br>返回类型是指最后会将一个什么类型的值赋给函数，比如int， double。你也完全可以不返回，只要在前面写一个void就行。<br>函数名则是田你来随心决定。<br>之后则是函数主体应放在花括号｛｝中完成。<br>来看看一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hahaha</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我是憨憨\n&quot;</span>)；</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lllll ()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我是&quot;</span>)；</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;18&quot;</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    hahaha();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">11111</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line">这样输出结果就是</span><br><span class="line">    我是憨憨</span><br><span class="line">    我是<span class="number">18</span></span><br></pre></td></tr></table></figure><p>怎么样，是不是一下就学会了！</p><h3 id="在以后的编程中，其实建议多多使用自定义的函数，去贴合结构化的思想"><a href="#在以后的编程中，其实建议多多使用自定义的函数，去贴合结构化的思想" class="headerlink" title="在以后的编程中，其实建议多多使用自定义的函数，去贴合结构化的思想"></a>在以后的编程中，其实建议多多使用自定义的函数，去贴合结构化的思想</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 韬哥的c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“c的数据”</title>
      <link href="/2022/09/05/%E2%80%9Cc%E7%9A%84%E6%95%B0%E6%8D%AE%E2%80%9D/"/>
      <url>/2022/09/05/%E2%80%9Cc%E7%9A%84%E6%95%B0%E6%8D%AE%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h4 id="各位，今天我们来了解一下C语言中的数据表示！（在阅读这一篇文章之前我由衷希望你有了解一些有关字节储存的知识。）"><a href="#各位，今天我们来了解一下C语言中的数据表示！（在阅读这一篇文章之前我由衷希望你有了解一些有关字节储存的知识。）" class="headerlink" title="各位，今天我们来了解一下C语言中的数据表示！（在阅读这一篇文章之前我由衷希望你有了解一些有关字节储存的知识。）"></a>各位，今天我们来了解一下C语言中的数据表示！（在阅读这一篇文章之前我由衷希望你有了解一些有关字节储存的知识。）</h4><p>首先C 有多种的数据类型。基本数据类型分为两大类:整数类型和浮点数类 型。通过为类型分配的储存量以及是有符号还是无符号，区分不同的整数类 型。而不同的浮点数类型则主要是在精度上有所不同。</p><h3 id="整数类型："><a href="#整数类型：" class="headerlink" title="整数类型："></a>整数类型：</h3><h4 id="int类型"><a href="#int类型" class="headerlink" title="int类型"></a>int类型</h4><p>int是-32768<del>32767之间的整数，超过范围表示不下，小数也表示不了；char表示-128</del>127之间的整数，或者A、B、C 、 D等一个字符。其中int类型是我们最为常用的整数类型、而chur类型其实它的字符与字符串功能才是更为常用的。</p><p>in t类型其实已完全够用，但是为了一些特殊情况下的整数引用，还衍生出一些在int基础之上的其余类型，貝体如下：</p><ol><li>short int类型(或者简写为short)占用的存储空间可能比int类型少，常</li><li>用于较小数值的场合以节省空间。与int类似，short是有符号类型。</li><li>long int或long占用的存储空间可能比int多，适用于较大数值的场合。与<br>int类似，long是有符号类型。</li><li>long long int或long long(C99标准加入)占用的储存空间可能比long多， 适用于更大数值的场合。<br>(对于这些衍生出的整数类型的具体用处以及其为什么能达到int上所附加的特点，我就不在这里长篇大论了，有兴趣的小朋友可以自行查阅资料或等我不一定会有的更新）</li></ol><p>相信有人在上面的描述中发现了一个陌生的词汇“有符号类型”，其实这也不难去理解，符号就是数字之前的+-号而已，貝体来说便是：</p><p><img src="/2022/09/05/%E2%80%9Cc%E7%9A%84%E6%95%B0%E6%8D%AE%E2%80%9D/f6e837ff5d3ad839fc20bb0be32f718.jpg"></p><p>比如int能存储的数据的范围是-32768<del>32767，而无符号int能存储的数据则是0</del>65535，并以unsigned int表示。</p><h4 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h4><p>上面已经提到char表示-128~127之间的整数，或者A、B、C 、 D等一个字符或字符串。<br>可以看出由于char表示范围太小了，所以除了一些需要小占用内存的整数表示外，一般不使用char类型。（补充一下， char 也有unsigned char存在）</p><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数与数学中实数的概念差不多。2.75、3.16E7、7.00 和 2e-8 都是浮 点数。注意，在一个值后面加上一个小数点，该值就成为一个浮点值。所 以，7是整数，7.00是浮点数。这里关键要理解浮点数和整数的储存方案不同。计算机把浮点数分成小 数部分和指数部分来表示，而且分开储存这两部分。因此，虽然7.00和7在 数值上相同，但是它们的储存方式不同。在十进制下，可以把7.0写成 0.7E1。这里，0.7是小数部分，1是指数部分。<br>浮点数的使用一般以float与double来进行，其中<br>C标准规定，float类型必须至少能表示6位有效数字，且取值范围至少是 10-37~10+37,即float类型必须至少精确表示小数点后的6位有效数字。C语言提供的另一种浮点类型是double(意为双精度)。double类型和 float类型的最小取值范围相同，但至少必须能表示10位有效数字。<br>这里我再时上一张占位符的表以供参考。</p><img src="/2022/09/05/%E2%80%9Cc%E7%9A%84%E6%95%B0%E6%8D%AE%E2%80%9D/fbaf597b4998f0e558c2d5c5658a014.jpg"><p>好了友友们今天就到这里了！886｡</p>]]></content>
      
      
      
        <tags>
            
            <tag> 韬哥的c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“浅浅搞一下运算”</title>
      <link href="/2022/09/04/%E2%80%9C%E6%B5%85%E6%B5%85%E6%90%9E%E4%B8%80%E4%B8%8B%E8%BF%90%E7%AE%97%E2%80%9D/"/>
      <url>/2022/09/04/%E2%80%9C%E6%B5%85%E6%B5%85%E6%90%9E%E4%B8%80%E4%B8%8B%E8%BF%90%E7%AE%97%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>今天我终于想起来要填一下c语言的坑（才不是觉得写语言文章又累又无聊)！仔细想了想在Hello World后应该搞点什么后，我最终决定讲一讲运算符。</strong></p><p><img src="/2022/09/04/%E2%80%9C%E6%B5%85%E6%B5%85%E6%90%9E%E4%B8%80%E4%B8%8B%E8%BF%90%E7%AE%97%E2%80%9D/95de3005b61ff6418cbcb2bef0043eb.jpg"></p><h5 id="（解释一下，图是我偷的）（豪横）"><a href="#（解释一下，图是我偷的）（豪横）" class="headerlink" title="（解释一下，图是我偷的）（豪横）"></a>（解释一下，图是我偷的）（豪横）</h5><p>从上图可以看到，大部分的运算逻辑和数学是相通的，其实需要注意的就是一些格式语法的区别，<strong>比如说</strong>：</p><ol><li><p>“&#x3D;”在c语言中是赋值的意思，即把等号右边的值给左边</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">a=<span class="number">10</span>;</span><br><span class="line">b=a</span><br></pre></td></tr></table></figure><p>如上面的代码，a，b就都是10，而想表示相等则要用”&#x3D;&#x3D;”。</p></li><li><p>c语言中有很多简便符号，如”+&#x3D;” “-&#x3D;” “*&#x3D;”，这里的&#x3D;其实都是赋值的意思，例如”a+&#x3D;b”就是”a&#x3D;a+b”的意思，其余的简便符号也就同理了。</p></li><li><p>再讲几个特殊的”++” “–”，这个其实也好理解，”a++&#x2F;++a”都是”a&#x3D;a+1”的意思，区别在于，前者本身依然是”a”的值，而后者则是”a+1”的值，具体看以下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">10</span></span><br><span class="line">    b=a++</span><br><span class="line">    c=a</span><br><span class="line">    d=++a</span><br><span class="line">    e=a</span><br></pre></td></tr></table></figure><p>那么这个时候，b&#x3D;10,c&#x3D;11,d&#x3D;12,e&#x3D;12，有没有脑袋晕呢？仔细想一想，其实蛮好理解的。</p></li></ol><p>好了，今天就到这了，我累了，我摆了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 韬哥的c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“栈和堆”</title>
      <link href="/2022/09/01/%E2%80%9C%E6%A0%88%E5%92%8C%E5%A0%86%E2%80%9D/"/>
      <url>/2022/09/01/%E2%80%9C%E6%A0%88%E5%92%8C%E5%A0%86%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h3 id="友友们，上一篇，我们讲述了动态内存的组成和运用这一期重点来讲一下其中的两个结构栈（stack）和堆（heap）的区别与作用。"><a href="#友友们，上一篇，我们讲述了动态内存的组成和运用这一期重点来讲一下其中的两个结构栈（stack）和堆（heap）的区别与作用。" class="headerlink" title="友友们，上一篇，我们讲述了动态内存的组成和运用这一期重点来讲一下其中的两个结构栈（stack）和堆（heap）的区别与作用。"></a>友友们，上一篇，我们讲述了动态内存的组成和运用这一期重点来讲一下其中的两个结构栈（stack）和堆（heap）的区别与作用。</h3><p>  其实，从上一篇的简单介绍中，我们可以得知，栈是由计算机自动分配内存以及自动删除分配的，而堆则是由程序员手动调用的，这便是两者之间最本质区别，其余两者之间一切的不同都是由这一点来引出的，那么下面让我们来分别详细的阐释这两个不同的储存区域。</p><h3 id="先说说栈-stack"><a href="#先说说栈-stack" class="headerlink" title="先说说栈(stack)"></a>先说说栈(stack)</h3><p>栈（stack）是由计算机自动分配的一块内存区域，而既然是由计算机自动控制的，也就注定它遵守着各种各样的规则。事实上，当你每创建一个函数，都会在栈区那里来创建一个栈帧，而每一个你所定义的局部变量都只可以在这个函数对应的栈帧之内使用，也就是说每一个函数的局部变量，它的存活期只在其对应的栈帧之内。<br>下面我们举一个例子来进行说明，比如说你在main函数中调用了SOE函数，那么，当程序运行到main中调用SOE函数这一步时，main函数的栈帧会暂停，它就会自动跳转到main之上的SOE的栈帧运行，在SOE 完成之后，再跳回到原来的main函数继续进行，如图所示</p><p><img src="/2022/09/01/%E2%80%9C%E6%A0%88%E5%92%8C%E5%A0%86%E2%80%9D/4dffed168eadbe1ef7f39b040bc0ebe.jpg"></p><p>   其实在图中，大家除了要看出来不同的局部变量的存活范围，还应该知道看似你在主函数中调用了其他一个函数，并将主函数中的一个值导入，但实际上只不过是将主函数的一个局部变量映射到了被调函数当中。哪怕他们的名称还有值一模一样，存活期的不同就决定了它们注定是两个完全不同的，没有任何关联的局部变量，其实关于这一点，大家可以在具体的函数的传值和传引用这两个用法之中看出来，有关这两个用法就抽空再说吧（摆！）。<br>  最后再补充十分重要的一点：栈溢出。上面已经不止一次的提过栈是由计算机自动控制的，故它的内存大小是有限的，一般为1mb，而一旦在栈中所储存着各种变量超出了这个范围，就会直接引起程序崩溃！这可是连职业程序员也需要万分谨慎的地方。</p><h3 id="再说说堆-heap"><a href="#再说说堆-heap" class="headerlink" title="再说说堆(heap)"></a>再说说堆(heap)</h3><p>   堆是由程序员所自由支配的，它与栈之间的不同，其实就像是汽车的手动挡和自动挡。由于是程序员所操控，便多了几分灵活性，同时也少去了计算机控制的便捷性。<br>   使用堆的过程其实就类似于向计算机申请一个明确大小和格式的内存，在这一过程中，便需要用到函数。在c中为malloc和free，在c++中则多了new和delete。由于C++可以看作是c的超集，所以实际上new和malloc相似，delete和free相似，具体格式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p=(<span class="type">int</span>)<span class="built_in">malloc</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">free</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   由于堆的大小相比下没有上限（取决于你计算机的配置）这里其实只需要担心一点，内存泄露，即有始无终：只用malloc申请了内存却没有用free释放，那么所申请的内存将一直存在，一直占用宝贵的内存资源，造成程序运行时占用的垃圾内存不断累积（你可以试着打开任务管理器看看一个没有释放内存的程序重复运行的内存占用的暴涨）。注意到这个，基本上就可以灵活运用堆了。</p><p>好了友友们，终于写完了，累死我了⊙﹏⊙</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“与君共勉--军训留念”</title>
      <link href="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/"/>
      <url>/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p><strong>为期十几天的军训就这样结束了，感觉时间不知不觉间就都溜走了。。。</strong><br><strong>现在回想一下，其实感觉蛮充实和有意思的，虽然也在被迫早起时骂过娘，在站军姿和踢正步时咬牙切齿，但是却也有和同学们一同训练的共勉，与教官围坐聊天时的开怀等等乐事，可以说一次军训彻底拉开了我大学生活的序幕！</strong><br>其实再稍微回忆一下，从入校到军训结束真的干了不少事，这里我就稍稍总结一下吧。（死去的回忆开始攻击我）</p><h3 id="在这十几天中"><a href="#在这十几天中" class="headerlink" title="在这十几天中"></a>在这十几天中</h3><h1 id="我"><a href="#我" class="headerlink" title="我"></a>我</h1><h3 id="认识了我的好舍友们"><a href="#认识了我的好舍友们" class="headerlink" title="认识了我的好舍友们"></a>认识了我的好舍友们</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/85bdfafb85980ba62e4146774b9d7a7.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/948674d7c8f0599180a9483102ad193.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/abf2060c5edb6db42d3d236c6cf2a07.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/a4a59899ed7cadbb59a5eb84451bcc9.jpg"></p><h3 id="和对门的弟兄玩了好玩的桌游"><a href="#和对门的弟兄玩了好玩的桌游" class="headerlink" title="和对门的弟兄玩了好玩的桌游"></a>和对门的弟兄玩了好玩的桌游</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/v2-18c8be3283ae1d2f3a58f69febfad9eb_r.jpg"></p><p>这是那位大兄弟！</p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/5028baa8174314e74968f93d49574c3.jpg"></p><h3 id="装饰了自己的小窝"><a href="#装饰了自己的小窝" class="headerlink" title="装饰了自己的小窝"></a>装饰了自己的小窝</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/3448952d800c26f478925ff5a382d3e.jpg"></p><h3 id="看到了很多美景"><a href="#看到了很多美景" class="headerlink" title="看到了很多美景"></a>看到了很多美景</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/7ff1b251d1265f6af6a8d708de9982b.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/0dc17269ec7adf08914055abd2b9842.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/c906feae0e1127df1b29e3f80a334dc.jpg"></p><h3 id="结识了有趣又有爱的班助-照片经过了同意哦"><a href="#结识了有趣又有爱的班助-照片经过了同意哦" class="headerlink" title="结识了有趣又有爱的班助(照片经过了同意哦)"></a>结识了有趣又有爱的班助(照片经过了同意哦)</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/6862f099437fe339bb0a5cc021181f6.jpg"></p><h3 id="吃到了丰盛的食堂饭菜"><a href="#吃到了丰盛的食堂饭菜" class="headerlink" title="吃到了丰盛的食堂饭菜"></a>吃到了丰盛的食堂饭菜</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/3d6e20520c7aa686c2d293d1b7960d3.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/773c96be0a0dacf7e0dda2aa54034cf.jpg"></p><h3 id="碰到了一位帮了我很多的图图学长"><a href="#碰到了一位帮了我很多的图图学长" class="headerlink" title="碰到了一位帮了我很多的图图学长"></a>碰到了一位帮了我很多的图图学长</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/972ccce5d24a6aa550d1aaa381aa989.jpg"></p><h3 id="遇到了可爱的童鞋们"><a href="#遇到了可爱的童鞋们" class="headerlink" title="遇到了可爱的童鞋们"></a>遇到了可爱的童鞋们</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/cd1dc4290595abcf87da0a23fe0fe8c.jpg"></p><h3 id="认识了一位很棒的教官（性感教官，在线军训）（没有露脸哦）"><a href="#认识了一位很棒的教官（性感教官，在线军训）（没有露脸哦）" class="headerlink" title="认识了一位很棒的教官（性感教官，在线军训）（没有露脸哦）"></a>认识了一位很棒的教官（性感教官，在线军训）（没有露脸哦）</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/db98af3366faf8b3a07ab1da09cf24d.jpg"></p><h3 id="又一次决定了自己的命运并杀死诸多自己的可能性"><a href="#又一次决定了自己的命运并杀死诸多自己的可能性" class="headerlink" title="又一次决定了自己的命运并杀死诸多自己的可能性"></a>又一次决定了自己的命运并杀死诸多自己的可能性</h3><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/d65a4d4211230e88a1a69e2acfc4ac6.jpg"></p><p><img src="/2022/09/01/%E2%80%9C%E4%B8%8E%E5%90%9B%E5%85%B1%E5%8B%89-%E5%86%9B%E8%AE%AD%E7%95%99%E5%BF%B5%E2%80%9D/b3df2ceed53250dae66565bf503fe40.jpg"></p><p><strong>盘点过去这段时间的点点滴滴，只觉万分感慨与满足，再几日便正式开课了，便又有一点小期待，合在一起便有一点小确幸的赶脚（笑)</strong></p><p>谨以此纪念大学的开始！</p><h2 id="诸君共勉！"><a href="#诸君共勉！" class="headerlink" title="诸君共勉！"></a>诸君共勉！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 生活随感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“计算机动态内存组成”</title>
      <link href="/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E7%BB%84%E6%88%90%E2%80%9D/"/>
      <url>/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E7%BB%84%E6%88%90%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="友友们，今天咱们简单扒一扒计算机的内在的一小部分—-动态内存"><a href="#友友们，今天咱们简单扒一扒计算机的内在的一小部分—-动态内存" class="headerlink" title="友友们，今天咱们简单扒一扒计算机的内在的一小部分—-动态内存"></a>友友们，今天咱们简单扒一扒计算机的内在的一小部分—-动态内存</h1><p>首先咱们先看看计算机系统的硬件组成</p><p><img src="/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E7%BB%84%E6%88%90%E2%80%9D/R-C.png"></p><p>可以看到，储存器周围很多的数据流与控制流，这就意味着它不单单是一个类似于仓库（当然这个功能是肯定有的）的东西，它的存在与程序的运行密不可分，而这一部分的内存又被叫做<strong>动态内存</strong>，简单来说它就像是考试时的草稿纸，办公时的办公桌，一些暂时需要的步骤或工具都在里面存放，随时用随时改随时弃，灵活而多变。其实它和手机的运存是一个道理，只不过手机的8g在电脑面前根本不够看。</p><h4 id="计算机的动态内存的组成可分为以下几个部分"><a href="#计算机的动态内存的组成可分为以下几个部分" class="headerlink" title="计算机的动态内存的组成可分为以下几个部分"></a>计算机的动态内存的组成可分为以下几个部分</h4><p><img src="/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E7%BB%84%E6%88%90%E2%80%9D/909c743396bd41f59686a3c76b05f2be.png"></p><h4 id="其中内存四区内容如下"><a href="#其中内存四区内容如下" class="headerlink" title="其中内存四区内容如下"></a>其中内存四区内容如下</h4><p>​        <strong>堆区（heap）</strong>：一般由程序员手动分配释放（动态内存申请与释放），若程序员不释放，程序结束时可能由操作系统回收。</p><p><strong>栈区（stack）</strong>：由编译器自动分配释放，存放函数的形参、局部变量等。当函数执行完毕时自动释放</p><p> <strong>全局区（global &#x2F; stack）</strong>：用于存放全局变量和静态变量， 里面细分有一个常量区，一些常量存放在此。该区域是在程序结束后由操作系统释放。</p><p><strong>代码区（code &#x2F; text）</strong>：用于存放程序代码，字符串常量也存放于此。</p><p>其实从中也不难理解，在编程过程中你的每一个指令，每一个定义的常量与变量都会由电脑在内存中自动分配一块地方来储存转化后的数字码，同时会记录下这个内存的地址以方便之后由电脑或程序员来寻找。同时储存区的不同也就意味着，有些变量虽然名字一样但实则毫无关系并且不能相互影响（其实可以通过指针来进行链接，但这里先不讨论）</p><p>有一点需要注意，不论是内存还是其中的几个区域，其大小都是有限的，如果你肆无忌惮的使用，比如搞个死循环的程序让电脑不断运行，那么不仅仅电脑会发热发烫，还会造成栈溢出或内存泄露等后果，这也是程序员所应该避免的</p><p>好了，就简单说到这里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“计算机逻辑”</title>
      <link href="/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E2%80%9D/"/>
      <url>/2022/08/30/%E2%80%9C%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%BB%E8%BE%91%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>那么我们今天就进一步来了解一下计算机这个东西！</p><h2 id="计算机（computer）俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。是能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。（摘自百度百科）"><a href="#计算机（computer）俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。是能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。（摘自百度百科）" class="headerlink" title="计算机（computer）俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。是能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。（摘自百度百科）"></a><strong>计算机（computer）俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有存储记忆功能。是能够按照程序运行，自动、高速处理海量数据的现代化智能电子设备。</strong>（摘自百度百科）</h2><h3 id="计算机是现代信息社会最伟大的发明，那么我们作为准程序员要想驾驭这个精密的造物，首要的目的就是了解计算机的运行逻辑。"><a href="#计算机是现代信息社会最伟大的发明，那么我们作为准程序员要想驾驭这个精密的造物，首要的目的就是了解计算机的运行逻辑。" class="headerlink" title="计算机是现代信息社会最伟大的发明，那么我们作为准程序员要想驾驭这个精密的造物，首要的目的就是了解计算机的运行逻辑。"></a>计算机是现代信息社会最伟大的发明，那么我们作为准程序员要想驾驭这个精密的造物，首要的目的就是了解计算机的<em><strong>运行逻辑</strong></em>。</h3><p>首先我们应该知道的是，计算机所储存的一切都是以数字0和1来表示的，无论是英文字母，符号，命令等一切向计算机输入的东西都是以符号来进行储存的。既然如此，最贴近计算机的编程语言其实就是数字语言，如果你精确掌握了数字语言，那么可以说，你便是程序员中最伟大的原始人（笑）。</p><p>诚然，数字语言的确是最最贴近计算机的，但同时也是最低效与原始的。现代的高级语言（如c）则以多种方式简化了编程工作：</p><ol><li>你不必在使用数字码来编程</li><li>使用的指令更贴近人脑的思维方式，可以更抽象的表达你的想法</li></ol><p>但要注意的是，<em><strong>计算机永远只识别数字码</strong></em>，而使用高级语言来编程实则只是将程序翻译成数字码这一过程交给了编译器来完成！</p><p>撤了这么多，可能有小朋友要提问了：“说了这么多，和逻辑有毛关系？”其实上述的几段就是在描述计算机的逻辑，你想一个只会识别0和1的东西它是不具备任何联想与思考能力的，它所做的就是精确的按照指令一步一步进行，这便是计算机的逻辑：<strong>绝对的服从，即便你的指令狗屁不通，漏洞百出</strong></p><p>而学习计算机便是去学习计算机的逻辑，以具备各种联想与思考能力的人脑去尽可能贴近冰冷死板的计算机，<em><strong>即面对一个难题，把问题具象化，寻找输入和输出与具体的变化，寻找其中的逻辑结构，在转化为高级编程语言</strong></em></p><p>最后再提一句，虽然计算机是死板而及其逻辑化的，但程序员的编程过程却不能只靠逻辑能力，也少不了经验，直觉之类感性的东西的支持，同时当大量复杂的及其逻辑化的程序输入计算机后计算机却表现的更加感性，这背后的弯弯绕绕实在有趣。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“第一个c语言程序”</title>
      <link href="/2022/08/27/%E2%80%9C%E7%AC%AC%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E2%80%9D/"/>
      <url>/2022/08/27/%E2%80%9C%E7%AC%AC%E4%B8%80%E4%B8%AAc%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h6 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言</strong>：</h6><h6 id="对于初学者来说，语言的选择我的建议是c-x2F-c-里面选择一个，原因无他，好入门而已。而在c-x2F-c-里面做选择的话其实都一样，无论你选择了哪一个，到后面指定是都要会的。鉴于我自己的大学有c-的课程，我便选择了c语言作为自己的第一门计算机语言，好为大一下的c-学习打个基础（两者在逻辑语言上真的十分相似，最大的区别在前期几乎就是语法）"><a href="#对于初学者来说，语言的选择我的建议是c-x2F-c-里面选择一个，原因无他，好入门而已。而在c-x2F-c-里面做选择的话其实都一样，无论你选择了哪一个，到后面指定是都要会的。鉴于我自己的大学有c-的课程，我便选择了c语言作为自己的第一门计算机语言，好为大一下的c-学习打个基础（两者在逻辑语言上真的十分相似，最大的区别在前期几乎就是语法）" class="headerlink" title="对于初学者来说，语言的选择我的建议是c&#x2F;c++里面选择一个，原因无他，好入门而已。而在c&#x2F;c++里面做选择的话其实都一样，无论你选择了哪一个，到后面指定是都要会的。鉴于我自己的大学有c++的课程，我便选择了c语言作为自己的第一门计算机语言，好为大一下的c++学习打个基础（两者在逻辑语言上真的十分相似，最大的区别在前期几乎就是语法）"></a>对于初学者来说，语言的选择我的建议是c&#x2F;c++里面选择一个，原因无他，好入门而已。而在c&#x2F;c++里面做选择的话其实都一样，无论你选择了哪一个，到后面指定是都要会的。鉴于我自己的大学有c++的课程，我便选择了c语言作为自己的第一门计算机语言，好为大一下的c++学习打个基础（两者在逻辑语言上真的十分相似，最大的区别在前期几乎就是语法）</h6><h2 id="好了废话不多说直接开整！（为什么第一个要写hello-world呢？这边建议自己查一查这个缘故哦"><a href="#好了废话不多说直接开整！（为什么第一个要写hello-world呢？这边建议自己查一查这个缘故哦" class="headerlink" title="好了废话不多说直接开整！（为什么第一个要写hello world呢？这边建议自己查一查这个缘故哦)"></a>好了废话不多说直接开整！（为什么第一个要写hello world呢？这边建议自己查一查这个缘故哦)</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">    <span class="comment">//这个其实正规点应该是  int main（void）在现代的编译器中几乎没啥区别</span></span><br><span class="line">&#123;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\a Hello world!\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对第一个程序的解析"><a href="#对第一个程序的解析" class="headerlink" title="对第一个程序的解析"></a>对第一个程序的解析</h2><p>好了，那么如果你用配好的编译器更着这个程序打一遍，你就完成了人生中第一个程序的编译（有没有很高兴！）</p><h4 id="那么我们现在开始逐句分析！（我会以注释的形式来解释每一句）"><a href="#那么我们现在开始逐句分析！（我会以注释的形式来解释每一句）" class="headerlink" title="那么我们现在开始逐句分析！（我会以注释的形式来解释每一句）"></a>那么我们现在开始<strong>逐句分析！</strong>（我会以注释的形式来解释每一句）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  <span class="comment">//  这第一句可以看作一个c语言固有的开头格式（建议记住哈），#include是</span></span><br><span class="line">  <span class="comment">//函数头文件的插入指令，其后跟着的就是头文件（或者叫头函数）。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  所谓头文件就是提前告诉计算机你的代码中会用到的函数语句，这样计算机才</span></span><br><span class="line">  <span class="comment">//会从内置的函数库中去调用，你也就才能在程序中使用那些函数头中包含的函数。而</span></span><br><span class="line">  <span class="comment">//我们这里所使用的 &lt;stdio.h&gt;则是一个基本的头文件,对于初学者来说先不要</span></span><br><span class="line">  <span class="comment">//考虑用其他的头文件，只需要知道这个概念。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">  <span class="comment">//  这里我们调用了 main函数即主调函数，这是c语言与计算机约定的程序入口，</span></span><br><span class="line">  <span class="comment">//作用便是告诉计算机你要开始编写（运行）你的程序，让它做好准备，即运行一</span></span><br><span class="line">  <span class="comment">//些你看不见的但是对于程序运行所必要的前提程序。而int则是声明了main函</span></span><br><span class="line">  <span class="comment">//数返回值的类型（这个之后再说)。</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;\a Hello world!\n&quot;</span>);</span><br><span class="line">  <span class="comment">//  这一句便是我们程序的主体，即运用printf这个被调函数打印出 Hello wor</span></span><br><span class="line">  <span class="comment">//ld ，其实挺好看懂的，重点在于结尾的&quot;；&quot;号一定不能忘！</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//  补充一下 \a表示蜂鸣器，即电脑会响一下，\n表示光标移动到下一行，即</span></span><br><span class="line">  <span class="comment">//换行，这两个字符为功能符，不打印。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//  这便是程序的结尾，是main主调函数的返回值，通常会返回一个0给电脑来告</span></span><br><span class="line">  <span class="comment">//诉它程序正常运行完毕，暂时先记住即可。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼~~~大功告成，恭喜你完成并理解了自己的第一个程序</p>]]></content>
      
      
      
        <tags>
            
            <tag> 韬哥的c语言入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“编译器与环境搭建”</title>
      <link href="/2022/08/25/%E2%80%9C%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%9D/"/>
      <url>/2022/08/25/%E2%80%9C%E7%BC%96%E8%AF%91%E5%99%A8%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h6 id="前言："><a href="#前言：" class="headerlink" title="前言："></a><strong>前言</strong>：</h6><h6 id="其实第一篇文章写些什么我蛮纠结的，最终感觉还是应该要实用一点（doge）。回想我并不长的的计算机学习过程，也是的的确确碰到了很多问题，虽然说解决这些问题的过程同样是一笔财富，但我还是决定小小总结一下，让新人少走一点歪路-说多了都是泪-lt-gt-。"><a href="#其实第一篇文章写些什么我蛮纠结的，最终感觉还是应该要实用一点（doge）。回想我并不长的的计算机学习过程，也是的的确确碰到了很多问题，虽然说解决这些问题的过程同样是一笔财富，但我还是决定小小总结一下，让新人少走一点歪路-说多了都是泪-lt-gt-。" class="headerlink" title="其实第一篇文章写些什么我蛮纠结的，最终感觉还是应该要实用一点（doge）。回想我并不长的的计算机学习过程，也是的的确确碰到了很多问题，虽然说解决这些问题的过程同样是一笔财富，但我还是决定小小总结一下，让新人少走一点歪路(说多了都是泪&lt;-_-&gt;)。"></a><em>其实第一篇文章写些什么我蛮纠结的，最终感觉还是应该要实用一点（doge）。回想我并不长的的计算机学习过程，也是的的确确碰到了很多问题，虽然说解决这些问题的过程同样是一笔财富，但我还是决定小小总结一下，让新人少走一点歪路(说多了都是泪&lt;-_-&gt;)。</em></h6><p><strong>首先</strong>要想学好一门计算机语言，动手实践是必不可少的，只听讲不真正动手打代码是绝对不可取的，而要开始打码之路一个好的编译器则是一切的开始，那么我就讲讲编译器的选择与配置。</p><p>选择编译器的首要准则便是专业性，而一个专业的编译器则应该具备语法高亮，自动补全，自动换行，写完代码需要知道自己有没有写错，需要调试，需要运行。这也是专门的编辑器有的功能。很明显这些优势电脑或手机自带的记事本都不具备，所以用其打代码是及其折磨的（再次对我暑假里用记事本狂打代码的同学表示同情，哈哈哈哈！）</p><p>那么基于此我推荐以下编译器：</p><ol><li>针对windows的童鞋们，其实选择有很多像是dev  c++，vs ，vscode等其实都可以。但是我更推荐vs与vscode，因为这两个都是微软自己开发的软件，专业且先进（指不像dev那样显得老土），同时你永远可以相信微软程序员的能力</li><li>对于苹果的同学，你也没啥好选的xcode上吧（其实上面的vs与vscode也行，但苹果上用微软官方编译器总感觉怪怪的），这里说一下，由于苹果对系统与软件的高限制，其实mac上打代码并不适合新人（大佬随意）。</li></ol><p>其实看到这里童鞋门也能看出来我就是来推vs与vscoded（@微软打钱）因为这两个功能齐全，确实好用！而且两个各有特点同学们按需来使用</p><ul><li><p><em>Visual Studio 各种各样作用只有在 Windows 和 macOS（Mac OS X ）以上运作，不可以弹跳各服务平台编写。并且ta是现阶段最时兴的Windows平台应用软件的集成化开发自然环境。给予了高級开发专用工具、调节作用、数据库查询作用和自主创新作用，协助在各种各样服务平台上迅速建立当今最优秀的应用软件，开发新的程序流程。</em></p></li><li><p><em>visual studio code是一款真真正正的混合开发在线编辑器，能够在客户习惯性的服务平台上应用，而不是非得迁移到 Windows上。除此外ta的最大亮点则是其高自由性，你可以用各类插件把vscode变成最适合你的编译器</em></p></li></ul><h3 id="之后来谈谈编译器的环境配置"><a href="#之后来谈谈编译器的环境配置" class="headerlink" title="之后来谈谈编译器的环境配置"></a><strong>之后来谈谈编译器的环境配置</strong></h3><p>以vscode为例，其最本质上就是一个编辑器用以编辑，与上面提到记事本是没有本质区别的，但它却可以有调试与运行等等功能，这便是我们配置环境的功劳（当然大头是微软程序员的功劳）</p><p>比如说我要使用c语言那么我就要使用llvm和mingw，python要下载python。这都是为了满足调试，运行的功能。下载并设置好这些后环境配置就完成了一半（框架已经有了）之后就是在.json中设置路径，即告诉你的电脑你要用如vscode来写cyy，将电脑中的gcc（你可以简单理解为电脑来理解你打的代码的地方）与你的vscode直接打通一条路，自动连接而不是每次运行就<strong>手动一个一个去链接</strong>（计算机也知道你做不到这个，所以没配好环境它会直接报错，很人性对吧）这些都完成后你就可以愉快的打代码啦</p><p>这里先这样抽象的理解下，至于如何配环境网上有很多大佬写了详尽的教材，小白只需一步一步跟着来就行，我就不赘述了</p><p>当然这里推荐小白看一下b站<em>BV1r4411E7Be</em>的视频，这位大佬浓缩一个自动配置程序，小白跟着走就行简单实用，先能打代码才是最重要的对吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“WELCOME!”</title>
      <link href="/2022/08/23/%E2%80%9C2%E2%80%9D/"/>
      <url>/2022/08/23/%E2%80%9C2%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的网站！"><a href="#欢迎来到我的网站！" class="headerlink" title="欢迎来到我的网站！"></a>欢迎来到我的网站！</h1><h2 id="Welcome-我叫张跃韬，一名武汉大学计算机学院的大一新生，在一位学长的帮助下搞了这个网站"><a href="#Welcome-我叫张跃韬，一名武汉大学计算机学院的大一新生，在一位学长的帮助下搞了这个网站" class="headerlink" title="Welcome! 我叫张跃韬，一名武汉大学计算机学院的大一新生，在一位学长的帮助下搞了这个网站"></a>Welcome! 我叫张跃韬，一名武汉大学计算机学院的大一新生，在一位学长的帮助下搞了这个网站</h2><p>*<em>接下来的四年，我将在这里记录自己的大学生活，并分享自己的学习过程中遇到的坑和解决方式，希望随着时间积累我能积累更多经验以帮助更多人！</em></p><p><img src="/2022/08/23/%E2%80%9C2%E2%80%9D/8c9e2e66afa051f9a262e156ace8909.jpg"></p><p><img src="/2022/08/23/%E2%80%9C2%E2%80%9D/b9a148c799b4ac3a3550cd6293a6571.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 开端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
